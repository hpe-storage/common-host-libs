diff --git a/glide.lock b/glide.lock
index 7732cf6..d01fbb6 100644
--- a/glide.lock
+++ b/glide.lock
@@ -1,5 +1,5 @@
-hash: b18ebaccee40b1a1e05c75c5df460e20a61c24b6ceaad605e0cd22b4be125a15
-updated: 2020-05-07T09:04:53.741686-07:00
+hash: d1060c9039c411629af5314fb8ea02d5cc764678298cf97bb1104492323994dc
+updated: 2021-07-06T16:32:13.610121-07:00
 imports:
 - name: github.com/coreos/etcd
   version: 98d308426819d892e149fe45f6fd542464cb1f9d
@@ -45,6 +45,13 @@ imports:
   version: edb144dfd453055e1e49a3d8b410a660b5a87613
 - name: github.com/mitchellh/mapstructure
   version: 3536a929edddb9a5b34bd6861dc4a9647cb459fe
+- name: github.com/opentracing/opentracing-go
+  version: d34af3eaa63c4d08ab54863a4bdd0daa45212e12
+  subpackages:
+  - ext
+  - log
+- name: github.com/pkg/errors
+  version: ba968bfe8b2f7e042a574c888954fccecfa385b4
 - name: github.com/satori/go.uuid
   version: f58768cc1a7a7e77a3bd49e98cdd21419399b6a3
 - name: github.com/Scalingo/go-etcd-lock
@@ -55,6 +62,32 @@ imports:
   version: 839c75faf7f98a33d445d181f3018b5c3409a45e
 - name: github.com/sparrc/go-ping
   version: 4e5b6552494c8005c60de6c60b50ebaefc69e592
+- name: github.com/uber/jaeger-client-go
+  version: f5d688f78184a0a96249d1fc374dc3478ec3adaa
+  subpackages:
+  - config
+  - internal/baggage
+  - internal/baggage/remote
+  - internal/reporterstats
+  - internal/spanlog
+  - internal/throttler
+  - internal/throttler/remote
+  - log
+  - rpcmetrics
+  - thrift
+  - thrift-gen/agent
+  - thrift-gen/baggage
+  - thrift-gen/jaeger
+  - thrift-gen/sampling
+  - thrift-gen/zipkincore
+  - transport
+  - utils
+- name: github.com/uber/jaeger-lib
+  version: 19c1561a544f618cb465213b043f67103c09107b
+  subpackages:
+  - metrics
+- name: go.uber.org/atomic
+  version: 557b938325dc924efd20cc1e09d41bc479b699d0
 - name: golang.org/x/crypto
   version: 227b76d455e791cb042b03e633e2f7fbcfdf74a5
   subpackages:
diff --git a/glide.yaml b/glide.yaml
index e2dde75..0bb4e68 100644
--- a/glide.yaml
+++ b/glide.yaml
@@ -68,3 +68,7 @@ import:
   version: 4e5b6552494c8005c60de6c60b50ebaefc69e592
 - package: github.com/fsnotify/fsnotify
   version: ^v1.4.9
+- package: github.com/opentracing/opentracing-go
+  version: ^v1.2.0
+- package: github.com/uber/jaeger-client-go
+  version: ^v2.29
diff --git a/logger/logger.go b/logger/logger.go
index 2c7336a..80b75bf 100644
--- a/logger/logger.go
+++ b/logger/logger.go
@@ -16,7 +16,11 @@ import (
 	"sync"
 	"time"
 
+	"github.com/opentracing/opentracing-go"
+	"github.com/opentracing/opentracing-go/ext"
 	log "github.com/sirupsen/logrus"
+	"github.com/uber/jaeger-client-go"
+	"github.com/uber/jaeger-client-go/config"
 	"golang.org/x/crypto/ssh/terminal"
 	"gopkg.in/natefinch/lumberjack.v2"
 )
@@ -163,6 +167,35 @@ func updateLogParamsFromEnv() {
 	}
 }
 
+func InitJaeger(service string) (opentracing.Tracer, io.Closer) {
+	cfg := &config.Configuration{
+		ServiceName: service,
+		Sampler: &config.SamplerConfig{
+			Type:  "const",
+			Param: 1,
+		},
+		Reporter: &config.ReporterConfig{
+			LogSpans: true,
+		},
+	}
+	tracer, closer, err := cfg.NewTracer(config.Logger(jaeger.StdLogger))
+	if err != nil {
+		panic(fmt.Sprintf("ERROR: cannot init Jaeger: %v\n", err))
+	}
+	return tracer, closer
+}
+
+func StartSpanFromRequest(tracer opentracing.Tracer, r *http.Request) opentracing.Span {
+	spanCtx, _ := Extract(tracer, r)
+	return tracer.StartSpan("ping-receive", ext.RPCServerOption(spanCtx))
+}
+
+func Extract(tracer opentracing.Tracer, r *http.Request) (opentracing.SpanContext, error) {
+	return tracer.Extract(
+		opentracing.HTTPHeaders,
+		opentracing.HTTPHeadersCarrier(r.Header))
+}
+
 // Initialize logging with given params
 func InitLogging(logName string, params *LogParams, alsoLogToStderr bool) (err error) {
 	initMutex.Lock()
@@ -217,6 +250,9 @@ func InitLogging(logName string, params *LogParams, alsoLogToStderr bool) (err e
 		"alsoLogToStderr": alsoLogToStderr,
 	}).Info("Initialized logging.")
 
+	tracer, _ := InitJaeger("CSI-Driver")
+	_ = tracer.StartSpan("csi-driver")
+
 	return nil
 }
 
@@ -455,7 +491,6 @@ func IsSensitive(key string) bool {
 		"token",
 		"accesskey",
 		"passphrase",
-
 	}
 	key = strings.ToLower(key)
 	for _, bad := range badWords {
